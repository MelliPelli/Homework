package main;

import java.util.Arrays;
import java.util.Scanner;
import java.util.StringTokenizer;

import java.lang.Math;


public class Main {
    private static String subnetwork;

    
    public static void main(String[] args) {
        final Scanner input = new Scanner(System.in);
        String ip_input, sub_confirmation = null;
        int[] ip_address;
        int prefix;

        System.out.print("Input IP Address with prefix : ");
        ip_input = input.next();
        
        final StringTokenizer ip_delim = new StringTokenizer(ip_input, "/");
        ip_address = ipToArray(ip_delim.nextToken());
        prefix = Integer.parseInt(ip_delim.nextToken());
        printData(ip_address, prefix);
        sub_confirmation = input.next();
        
    }
 
    //Výpočet masky 
    public static int[] maskToArray(int prefix) {
        final int[] result = { 0, 0, 0, 0 };
        String mask = "";
        for (int i = 1; i <= 32; i++) {
            if (prefix > 0) {
                mask += "1";
                if (i == 8 || i == 16 || i == 24) {
                    mask += ".";
                }
            } else {
                mask += "0";
                if (i == 8 || i == 16 || i == 24) {
                    mask += ".";
                }
            }
            prefix -= 1;
        }
        final StringTokenizer subnet = new StringTokenizer(mask, ".");
        for (int i = 0; i < result.length; i++) {
            result[i] = Integer.parseInt(subnet.nextToken(), 2);
        }
        return result;
    }

    //Získání vypsané ip adresy
    public static int[] ipToArray(final String ip) {
        final int[] result = { 0, 0, 0, 0 };
        final StringTokenizer ip_byte = new StringTokenizer(ip, ".");
        for (int i = 0; i < result.length; i++) {
            result[i] = Integer.parseInt(ip_byte.nextToken());
        }
        return result;
    }
    //Získání networku
    public static int[] getNetworkAddress(final int[] ip, final int prefix) {
        final int[] result = { 0, 0, 0, 0 };
        final int[] subnet = maskToArray(prefix);
        for (int i = 0; i < result.length; i++) {
            result[i] = (ip[i] & subnet[i]);
        }
        return result;
    }
   

    //Kontrola hosta
    public static int getAvailableHost(final int prefix) {
        final int result = (int) Math.pow(2, (32 - prefix)) - 2;
        return result;
    }

    
    //Získání Masky
    public static int getPrefixMask(final int[] mask) {
        int result = 0;
        final String subnet = toBinary(mask);

        for (int i = 0; i < subnet.length(); i++) {
            if (subnet.charAt(i) == '1') {
                result++;
            }
        }
        return result;
    }
    //Získání prvního hosta
    public static int[] getFirstAddress(final int[] ip, final int prefix) {
        final int[] result = getNetworkAddress(ip, prefix);
        result[3] += 1;
        return result;
    }
    //Získání posledního hosta
    
//Výpis v desítkové soustavě
    public static void printData(final int[] ip, final int prefix) {
        System.out.printf("IP Adresa\t\t: %d.%d.%d.%d\n", ip[0], ip[1], ip[2], ip[3]);
        
        int[] data = maskToArray(prefix);
        System.out.printf("Maska\t\t: %d.%d.%d.%d\n", data[0], data[1], data[2], data[3]);
        
        data = getNetworkAddress(ip, prefix);
        System.out.printf("Network\t\t: %d.%d.%d.%d\n", data[0], data[1], data[2], data[3]);
        
        data = getFirstAddress(ip, prefix);
        System.out.printf("První host\t\t: %d.%d.%d.%d\n ", data[0], data[1], data[2], data[3]);
        
        data = getLastAddress(ip, prefix);
        System.out.printf("Poslední host\t\t: %d.%d.%d.%d\n", data[0], data[1], data[2], data[3]);
        
        
        
    }

   
    public static int getPrefixFromHost(final int host) {
        int result = 0;
        final long[] valid_host = new long[32];
        for (int i = 0; i < 32; i++) {
            valid_host[i] = (long) Math.pow(2, i);
            if (host == valid_host[i]) {
                result = i;
            }
        }
        return result = 32 - result;
    }

    //Získává hosta pomocí masky
    public static int getSubnetworkHost(final int prefix, final int subnetwork) {
        int host = getAvailableHost(prefix) + 2;
        return host = host / subnetwork;
    }

    //Vypisuje přes masku
    public static void getSubnetwork(final int[] ip, final int prefix, final int subnetwork) {
        int b = 0 + subnetwork;
        
        final int[][] ip_networks = new int[b][4];
        final int[][] mask_networks = new int[b][4];
        final int[][] broadcast_networks = new int[b][4];
        final int[][] first_ip_networks = new int[b][4];
        final int[][] last_ip_networks = new int[b][4];
        final int host = (getAvailableHost(prefix) + 2) / b;
        final int prefix_subnetwork = getPrefixFromHost(host);
        for (int i = 0; i < b; i++) {
            ip_networks[i] = getNetworkAddress(ip, prefix_subnetwork);
            mask_networks[i] = maskToArray(prefix_subnetwork);
            first_ip_networks[i] = getFirstAddress(ip, prefix_subnetwork);
            last_ip_networks[i] = getLastAddress(ip, prefix_subnetwork);
         
            //Přepočítává a vypisuje adresy
        for (int j = 0; j < b; j++) {
            System.out.println("=================================================");
            if (j < subnetwork) {
                System.out.printf("Subnetwork - %d\n", j + 1);
            } else {
                System.out.printf("Residual Subnetwork\n");
            }
            System.out.printf("Network Address\t\t: %d.%d.%d.%d\n", ip_networks[j][0], ip_networks[j][1],
                    ip_networks[j][2], ip_networks[j][3]);
            System.out.printf("Maska \t\t: %d.%d.%d.%d\n", mask_networks[j][0], mask_networks[j][1],
                    mask_networks[j][2], mask_networks[j][3]);
            System.out.printf("První Host\t\t: %d.%d.%d.%d -> ", first_ip_networks[j][0], first_ip_networks[j][1],
                    first_ip_networks[j][2], first_ip_networks[j][3]);
            System.out.printf("Poslední Host%d.%d.%d.%d\n", last_ip_networks[j][0], last_ip_networks[j][1], last_ip_networks[j][2],
                    last_ip_networks[j][3]);
            System.out.printf("Broadcast Address\t: %d.%d.%d.%d\n", broadcast_networks[j][0], broadcast_networks[j][1],
                    broadcast_networks[j][2], broadcast_networks[j][3]);
            System.out.printf("Host\t\t: %d\n", ((getAvailableHost(prefix) + 2) / b) - 2);
        }
        System.out.println("=================================================");
    }
  }
